x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z,2,function(x) a%*%x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z,2,function(x) a%*%x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
library(animation)
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=2)
print(a)
x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z,2,function(x) a%*%x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z,2,function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
library(animation)
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=2)
print(a)
x11(width=10,height=5)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
# x11(width=15,height=10)
x11()
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
library(animation)
print(wd)
library(animation)
setwd('/Users/Audiorunner13/CUNY MSDS Course Work/DATA605 Fall 2022/Week 1 - SLE Vectors Matrices/')
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=2)
print(a)
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
saveGIF(ani.replay(), img.name = 'tmp', convert='magick', clean=TRUE)
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
#  print(a[1,1])
# Apply the anonymous function(x) equation a%*%x
new_matrix=apply(z, 2, function(x) a%*% x)
#  print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
mtrx <- matrix(c(21, 6, 51, 1, 10, 41), nrow = 2, ncol = 3, byrow = TRUE)
print(mtrx)
dt <- mtrx %*% t(mtrx)
print(dt)
# saveGIF(ani.replay(), img.name = 'tmp', convert='magick', clean=TRUE)
mtrx <- matrix(c(21, 6, 51, 1, 10, 41), nrow = 2, ncol = 3, byrow = TRUE)
print(mtrx)
print(t(mtrx))
dt <- mtrx %*% t(mtrx)
print(dt)
# saveGIF(ani.replay(), img.name = 'tmp', convert='magick', clean=TRUE)
new_matrix=apply(z, 2, function(x) a%*% x)
print(new_matrix)
mtrx <- matrix(c(21, 6, 51, 1, 10, 41), nrow = 2, ncol = 3, byrow = TRUE)
print(mtrx)
print(t(mtrx))
dt <- mtrx %*% t(mtrx)
print(dt)
# saveGIF(ani.replay(), img.name = 'tmp', convert='magick', clean=TRUE)
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
print(a[1,1])
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
#  print(i)
a[1,1]=i
print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
print(i)
a[1,1]=i
print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
print(i)
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=10)){
print(i)
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=20)){
print(i)
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
print(i)
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
# print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
library(animation)
setwd('/Users/Audiorunner13/CUNY MSDS Course Work/DATA605 Fall 2022/Week 1 - SLE Vectors Matrices/')
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# dev.control('enable')
myani=ani.record(reset = FALSE, replay.cur = FALSE)
# dev.control('enable')
myani=ani.record(reset = FALSE, replay.cur = FALSE)
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
library(animation)
setwd('/Users/Audiorunner13/CUNY MSDS Course Work/DATA605 Fall 2022/Week 1 - SLE Vectors Matrices/')
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
#Plot the initials x and y with an x-axis from -3 to 3 and a y-axis from -3 to 3
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
print(myani)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
# dev.control('enable')
myani=ani.record(reset = FALSE, replay.cur = FALSE)
print(myani)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = TRUE)
# dev.control('enable')
myani=ani.record(reset = TRUE, replay.cur = FALSE)
print(myani)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
# dev.control('enable')
my_ani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=3)
print(a)
# dev.control('enable')
my_ani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=4)
print(a)
# dev.control('enable')
my_ani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=45)
print(a)
# dev.control('enable')
my_ani=ani.record(reset = TRUE, replay.cur = FALSE)
# Construct a diagonal matrix which is an identity matrix
a=diag(x=2)
print(a)
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
# print(new_matrix)
# plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
plot(new_matrix[2,]~new_matrix[1,], xlim=c(-3,3), ylim=c(-3,3))
ani.record()
#  Sys.sleep(1)
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
# print(new_matrix)
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
# print(new_matrix)
}
# use the x11() function set the width and height of your graphic window
x11(width=15,height=10)
for (i in seq(3,-3,length.out=100)){
a[1,1]=i
#  print(a[1,1])
# Apply to the matrix z columns(2), the anonymous function(x) equation a%*% x
new_matrix=apply(z, 2, function(x) a%*% x)
print(new_matrix)
}
library(animation)
setwd('/Users/Audiorunner13/CUNY MSDS Course Work/DATA605 Fall 2022/Week 1 - SLE Vectors Matrices/')
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
#Plot the initials x and y with an x-axis from -3 to 3 and a y-axis from -3 to 3
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
# combine x and y vectors
z=rbind(x,y)
print(z)
#Plot the initials x and y with an x-axis from -3 to 3 and a y-axis from -3 to 3
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
# c() - defines a vector, rep() - may be used to repeat a series of integers or characters
# seq() - generates a sequence of a prior known pattern.
x=c(rep(-1,500),seq(-1,-0.5,length.out=1000),seq(-1,-0.5,length.out=1000), rep(-0.5,500), # Build P
rep(0,500),seq(0,0.5,length.out=1000),seq(0,0.5,length.out=1000),rep(0.5,500), seq(0.25,0.5,length.out=1000)) # Build G
y=c(seq(-1,1,length.out=500),rep(1,1000),rep(0,1000),seq(0,1,length.out=500), # Build P
seq(-1,1,length.out=500),rep(1,1000), rep(-1,1000),seq(-1,0,length.out=500), rep(0,1000)) # Build G
print(x)
# combine x and y vectors
z=rbind(x,y)
# print(z)
#Plot the initials x and y with an x-axis from -3 to 3 and a y-axis from -3 to 3
plot(y~x, xlim=c(-3,3), ylim=c(-3,3))
# x %*% X11()
knitr::opts_chunk$set(echo = TRUE)
# c_matrix <- matrix(c(2,4,3,-3,1,1,1,2,1,-6,9,8,0,0,0), nrow=3, ncol=5)
# c_matrix <- matrix(c(-7,5,1,-6,5,0,-12,7,4), nrow=3, ncol=3)
c_matrix <- matrix(c(2,1,-1,1,3,1,2,2,1,1,3,1,4,0,5,3), nrow=4, ncol=4)
rref(c_matrix)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(RGL_USE_NULL=TRUE)
library(tidyverse)
library(matlib)
library(pracma)
# A <- matrix(c(3,1,4,2,-1,2), nrow=3, ncol=2)
# A <- matrix(c(2,1,4,1,-3,-2,5,-1,6), nrow=3, ncol=3) # C30
# A <- matrix(c(2,-1,3,3,1,-1,4,5), nrow=4, ncol=2) # C19
A <- matrix(c(-7,5,1,-6,5,0,-12,7,4), nrow=3, ncol=3)
print(A)
# b <- c(1,2,2)
# b <- c(10,-2,12) # C30
# b <- c(6,-2,4,2) # C19
b <- c(0,0,0)
print(b)
# showEqn(A,b)
showEqn(A,b)
Solve(A,b, verbose=TRUE)
# c_matrix <- matrix(c(2,4,3,-3,1,1,1,2,1,-6,9,8,0,0,0), nrow=3, ncol=5)
# c_matrix <- matrix(c(-7,5,1,-6,5,0,-12,7,4), nrow=3, ncol=3)
c_matrix <- matrix(c(2,1,-1,1,3,1,2,2,1,1,3,1,4,0,5,3), nrow=4, ncol=4)
rref(c_matrix)
# c_matrix <- matrix(c(2,4,3,-3,1,1,1,2,1,-6,9,8,0,0,0), nrow=3, ncol=5)
# c_matrix <- matrix(c(-7,5,1,-6,5,0,-12,7,4), nrow=3, ncol=3)
c_matrix <- matrix(c(9,5,4,3,-6,1,2,1,3,4,3,-5), nrow=3, ncol=4)
rref(c_matrix)
# c_matrix <- matrix(c(2,4,3,-3,1,1,1,2,1,-6,9,8,0,0,0), nrow=3, ncol=5)
# c_matrix <- matrix(c(-7,5,1,-6,5,0,-12,7,4), nrow=3, ncol=3)
c_matrix <- matrix(c(-1,1,-2,-3,2,-3,0,1,0,-2,4,-2,3,4,3,3), nrow=4, ncol=4)
rref(c_matrix)
