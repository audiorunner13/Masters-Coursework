group_by(book) %>%                    # group output by book
unnest_tokens(chapter, text, token = "regex",    #  unnest tokens by chapters using regex to find
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>%  # chapters.  each row contains the all
ungroup())                                                 # sentences in a chapter
(austen_chapters %>%
group_by(book) %>%
summarise(chapters = n()))
(bingnegative <- get_sentiments("bing") %>%
filter(sentiment == "negative"))
(tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text))
(wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n()))
(tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
slice_max(ratio, n = 1) %>%
ungroup())
lookup_bing <- get_sentiments("bing")
filename <- getURL("https://raw.githubusercontent.com/audiorunner13/Masters-Coursework/main/DATA607%20Spring%202021/Week10/Data/Tweets.csv")
airline_tweets_src <- read.csv(text = filename,na.strings = ""),50
library(tidyverse)
library(tidytext)
library(tinytex)
library(gutenbergr)
library(janeaustenr)
library(tidyverse)
library(RCurl)
library(knitr)
library(wordcloud)
library(reshape2)
(p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences"))  # unnest tokens into a field called sentence with
# sentences
(p_and_p_sentences$sentence[2])
(austen_chapters <- austen_books() %>%  # pipe austen_books to group_by()
group_by(book) %>%                    # group output by book
unnest_tokens(chapter, text, token = "regex",    #  unnest tokens by chapters using regex to find
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>%  # chapters.  each row contains the all
ungroup())                                                 # sentences in a chapter
(austen_chapters %>%
group_by(book) %>%
summarise(chapters = n()))
(bingnegative <- get_sentiments("bing") %>%
filter(sentiment == "negative"))
(tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text))
(wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n()))
(tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
slice_max(ratio, n = 1) %>%
ungroup())
lookup_bing <- get_sentiments("bing")
filename <- getURL("https://raw.githubusercontent.com/audiorunner13/Masters-Coursework/main/DATA607%20Spring%202021/Week10/Data/Tweets.csv")
airline_tweets_src <- read.csv(text = filename,na.strings = "")
#filename <- "/Users/Audiorunner13/CUNY MSDS Course Work/DATA607 Spring 2021/Week10/archive/Tweets.csv"
#head(airline_tweets_src <- read.csv(filename),50)
airline_tweets_src$text <- tolower(airline_tweets_src$text) %>% str_replace("^@[a-z]* ", "")
head(airline_tweets <- airline_tweets_src %>% select(, airline, text, airline_sentiment),10)
(tidy_airline_reviews <- airline_tweets %>%
group_by(airline) %>%
mutate(
review = row_number())  %>%
ungroup() %>%
unnest_tokens(word, text))
(tidy_airline_reviews %>%      # pipe tidy_books content to filter()
filter(airline == "Virgin America") %>%     # filter on the book Emma
inner_join(lookup_bing) %>%        #  inner_join() on nrc_joy
count(word, sort = TRUE))      #  get a count of each joy word and sort in descending order
(twitter_airline_sentiment <- tidy_airline_reviews %>%
inner_join(lookup_bing) %>%
count(airline, sentiment))
x <- 1
while (x < 13){
if (twitter_airline_sentiment$sentiment[x] == "negative"){
twitter_airline_sentiment$n[x] = twitter_airline_sentiment$n[x] * -1
}
x <- x + 1
}
twitter_airline_sentiment
twitter_airline_sentiment <- twitter_airline_sentiment %>% rename(Airline = airline, Sentiment = sentiment, Count = n)
ggplot(twitter_airline_sentiment, aes(x = Airline, y = Count)) +
geom_bar(
stat = "identity", position = position_stack(),
color = "white", fill = "blue"
) +
labs(title = ("Airline Sentiment Analysis")) +
theme_minimal() +
coord_flip()
(twitter_airline_sentiment %>%
pivot_wider(names_from = Sentiment, values_from = Count, values_fill = 0) %>%
mutate(Sentiment = positive + negative) %>%
rename(Negative = negative, Positive = positive))
(airline_tweets %>%
group_by(airline) %>%
summarise(texts = n()) %>%
ungroup)
warnings()
library(DATA606)
startLab("Lab8")
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
knitr::opts_chunk$set(eval = TRUE, results = TRUE, fig.show = "show", message = FALSE, warning = FALSE)
head(hfi,10)
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
hfi %>%
plot(x = pf_expression_control, y = pf_score)
hfi %>%
plot(x = pf_expression_control, y = pf_score)
hfi %>%
plot(hfi, x = pf_expression_control, y = pf_score)
hfi %>%
plot(,x = pf_expression_control, y = pf_score)
plot(,x = hfi$pf_expression_control, y = hfi$pf_score)
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
plot(,x = hfi$pf_expression_control, y = hfi$pf_score)
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
plot(,x = hfi$pf_expression_control, y = hfi$pf_score)
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = pf_expression_control, y = pf_score, data = hfi)
?plot_ss
??plot.ss
library(DATA606)
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = pf_expression_control, y = pf_score, data = hfi)
?plot_ss
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = pf_expression_control, y = pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(,x = pf_expression_control, y = pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = pf_expression_control, y = pf_score,)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
library(DATA606)
library(tidyverse)
library(openintro)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
library(DATA606)
library(tidyverse)
library(openintro)
library(ggplot2)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi_complete <- hfi[complete.cases(hfi), ]
#plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi$pf_expression_control), ] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi[complete.cases(hfi$pf_expression_control), complete.cases(hfi$pf_score)] %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = complete.cases(hfi$pf_expression_control), y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = hfi[complete.cases(hfi$pf_expression_control)], y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = hfi$pf_expression_control[complete.cases(hfi$pf_expression_control)], y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
pf_expression_ctl <- !is.na(hfi$pf_expression_control)
pf_expression_ctl <- !is.na(hfi$pf_expression_control)
pf_score_no_na <- !is.na(hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi %>% plot_ss(x = pf_expression_ctl, y = pf_score_no_na)
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = pf_expression_ctl, y = pf_score_no_na)
pf_expression_ctl <- hfi$pf_expression_control
#pf_expression_ctl <- !is.na(hfi$pf_expression_control)
# pf_score_no_na <- !is.na(hfi$pf_score)
pf_expression_ctl <- if(is.na(hfi$pf_expression_control)){0}
else {hfi$pf_expression_control}
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control,]
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
#  !is.na(hfi$pf_expression_control)
# pf_score_no_na <- !is.na(hfi$pf_score)
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
#  !is.na(hfi$pf_expression_control)
# pf_score_no_na <- !is.na(hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi_no_na %>% plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_n_na$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi_no_na %>% plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
#this isn't working, wondering if we should just remove rows with NA
hfi_no_na %>% plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score,)
#this isn't working, wondering if we should just remove rows with NA
hfi_no_na %>% plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = pf_expression_control, y = pf_score, data = hfi, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score), showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
w
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
m1 <- lm(hfi_no_na$pf_score ~ hfi_no_na$pf_expression_control)
(m1 <- lm(hfi_no_na$pf_score ~ hfi_no_na$pf_expression_control))
m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m1)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m2 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m2)
m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
))
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m1)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = hfi_no_na), aes(x = pf_expression_control, y = pf_score)) +
ggplot(data = hfi_no_na), aes(x = pf_expression_control, y = pf_score)) +
ggplot(data = hfi), aes(x = pf_expression_control, y = pf_score)) +
ggplot(data = hfi_no_na, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
?hfi
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(sample = .resid)) +
stat_qq()
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 100) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 15) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
squares that you got? How does it compare to your neighbors?
m2(plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE))
squares that you got? How does it compare to your neighbors?
m2(plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE))
(m1 <- lm(hfi_no_na$pf_score ~ hfi_no_na$pf_expression_control, data = hfi_no_na))
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
(m1 <- lm(hfi_no_na$pf_score ~ hfi_no_na$pf_expression_control, data = hfi_no_na))
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
squares that you got? How does it compare to your neighbors?
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
#this isn't working, wondering if we should just remove rows with NA
# plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, data = hfi_no_na)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
library(DATA606)
library(tidyverse)
library(openintro)
library(ggplot2)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m1)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
library(DATA606)
library(tidyverse)
library(openintro)
library(ggplot2)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m1)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
ggplot(data = hfi_no_na, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(sample = .resid)) +
stat_qq()
library(DATA606)
library(tidyverse)
library(openintro)
library(ggplot2)
data("hfi")
head(hfi,10)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point()
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
#this isn't working, wondering if we should just remove rows with NA
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score, showSquares = TRUE)
(m1 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m1)
plot_ss(x = hfi_no_na$pf_expression_control, y = hfi_no_na$pf_score)
ggplot(data = hfi_no_na, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(sample = .resid)) +
stat_qq()
View(hfi_no_na)
hfi_no_na <- hfi[!is.na(hfi$pf_religion_restrictions),]
hfi_no_na <- hfi[!is.na(hfi$pf_religion_restrictions),]
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
ggplot(data = hfi_no_na, aes(x = pf_religion_restrictions, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
hfi_no_na <- hfi[!is.na(hfi$pf_religion),]
hfi_no_na <- hfi[!is.na(hfi$pf_religion_restrictions),]
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
ggplot(data = hfi_no_na, aes(x = pf_religion, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
hfi_no_na <- hfi[!is.na(hfi$pf_religion),]
hfi_no_na <- hfi[!is.na(hfi$pf_religion_restrictions),]
hfi_no_na <- hfi[!is.na(hfi$pf_expression),]
hfi_no_na <- hfi[!is.na(hfi$pf_expression_control),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
ggplot(data = hfi_no_na, aes(x = pf_expression, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = hfi_no_na, aes(x = pf_religion, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = hfi_no_na, aes(x = hfi_no_na$pf_religion, y = hfi_no_na$pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = hfi_no_na, aes(x = pf_religion, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
hfi_no_na <- hfi[!is.na(hfi$pf_religion),]
hfi_no_na <- hfi[!is.na(hfi$pf_expression),]
hfi_no_na <- hfi[!is.na(hfi$pf_score),]
ggplot(data = hfi_no_na, aes(x = pf_religion, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
hfi_no_na %>%
summarise(cor(pf_expression, pf_score, use = "complete.obs"))
(m3 <- lm(pf_score ~ pf_expression_control, data = hfi_no_na))
summary(m3)
hfi_no_na %>%
summarise(cor(pf_religion, pf_score, use = "complete.obs"))
(m3 <- lm(pf_score ~ pf_religion, data = hfi_no_na))
ggplot(data = m3, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
